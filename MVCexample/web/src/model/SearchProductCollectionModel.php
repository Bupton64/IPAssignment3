<?php
namespace agilman\a2\model;

/**
 * Class SearchProductCollectionModel
 *
 * A collection model for products when searching. Separated from other product
 * collection models due to a different need in the products being collected.
 *
 * @package agilman/a2
 * @author  Andrew Gilman <a.gilman@massey.ac.nz>
 */
class SearchProductCollectionModel extends Model
{
    /***
     * @var array $productIds, the IDs of all products to be generated by the collection model.
     */
    private $productIds;
    /***
     * @var int $N, the number of products collected by the model.
     */
    private $N;

    /**
     * @return int, the number of products collected by the model.
     */
    public function getN()
    {
        return $this->N;
    }

    /***
     * SearchProductCollectionModel constructor.
     *
     * Prepares the CollectionModel to retrieve the products
     * that match the user query.
     *
     * @param $q string, a search query made by a user
     * @throws \mysqli_sql_exception, if the SQL query fails
     */
    public function __construct($q)
    {
        parent::__construct();

        if (!$result = $this->db->query("SELECT * FROM `product` LEFT JOIN `category` 
                                        ON `category`.`id` = `product`.`category` 
                                        WHERE `product`.`name` LIKE '%{$q}%' 
                                        OR `SKU` LIKE '%{$q}%' 
                                        OR `category`.`name` LIKE '%{$q}%';")) {
            throw new \mysqli_sql_exception($this->db->error, $this->db->errno);
        }
        $this->productIds = array_column($result->fetch_all(), 0);
        $this->N = $result->num_rows;
    }

    /**
     * Get product collection
     * Get the products specified by the user
     * @return \Generator|AccountModel[] Products
     */
    public function getProducts()
    {
        foreach ($this->productIds as $id) {
            // Use a generator to save on memory/resources
            // load accounts from DB one at a time only when required
            yield (new ProductModel())->load($id);
        }
    }
}
